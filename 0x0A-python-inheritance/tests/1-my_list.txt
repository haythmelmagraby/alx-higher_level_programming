import function from module:
        >>> MyList = __import__('1-my_list').MyList

Test correct typing:
        >>> ls = MyList()
        >>> type(ls) == MyList
	True

Test correct inhirit:
        >>> ls = MyList()
        >>> isinstance(ls, list)
        True

Test print_sorted method is instace:
	>>> type(MyList.__dict__['print_sorted'])
	<class 'function'>

Test print_sorted without args:
	>>> ls.__class__.print_sorted()
	Traceback (most recent call last):
	TypeError: print_sorted() missing 1 required positional argument: 'self'

Test print_sorted with much args:
	>>> ml.print_sorted([100, 101, 102], 500)
	Traceback (most recent call last):
	TypeError: print_sorted() takes 1 positional argument but 3 were given

Test print_sorted with single argument:
	>>> ml.print_sorted([4, 2, 5])
	Traceback (most recent call last):
	TypeError: print_sorted() takes 1 positional argument but 2 were given

Test Normal list test:
	>>> ls = MyList([100, 300, 200])
	>>> ls.print_sorted()
	[100, 200, 300]

Test add to list:
	>>> ls = MyList()
	>>> ls.append(1)
	>>> ls
	[1]

Test Empty list:
	>>> ls = MyList()
	>>> ls.print_sorted()
	[]
Test negative value:
	>>> ls = MyList([-400, -200, 1 , -300 , 0])
	>>> ls.print_sorted()
	[-400, -300, -200, 0, 1]

Test changes list:
	>>> ls = MyList([100, 300, 200])
	>>> ls.print_sorted()
	[100, 200, 300]
	>>> ls
	[100, 300, 200]

Test already sorted list:
	>>> ls = MyList([1, 2, 3, 4, 5, 6])
	>>> ls.print_sorted()
	[1, 2, 3, 4, 5, 6]

